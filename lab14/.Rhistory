homerange
homerange%>%
ggplot(aes(x = taxon, y = log10.mass, fill=taxon)) +
geom_violin(alpha = .7, na.rm = TRUE) +
geom_boxplot(color = "grey", alpha = .3, na.rm = TRUE) +
coord_flip()
heartrate
heartrate_long <- heartrate %>%
pivot_longer(-patient, #patient does not pivot
names_to = "drug",
values_to = "heartrate"
)
heartrate_long
heartrate_long %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")
heartrate_diff <- heartrate%>%
mutate(across(c(a,b,c,d), ~ . - no_drug)) %>%
select(-no_drug) %>%
pivot_longer(-patient, #patient does not pivot
names_to = "drug",
values_to = "heartrate"
)
heartrate_diff
heartrate_diff %>%
ggplot(aes(patient, drug, fill= heartrate)) +
geom_tile()+
scale_fill_gradient2(low="green", mid = "white", high="red")
# scale_fill_graient2 lets you set a color direction for zero (mid), positive (high), and negative (low)
penguins
penguins%>%
#filter(body_mass_g !="NA")%>%
#filter(sex!= "NA")%>%
na.exclude()%>% #this works to exclude NA values as well
ggplot(aes(x = species, y = sex, fill= body_mass_g)) +
geom_tile()+
scale_fill_gradient(low="orange", high="blue")
beachbugs_long%>%
ggplot(aes(site, year, fill= buglevels)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")
beachbugs_long%>%
ggplot(aes(site, year, fill= buglevels)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")+
theme(axis.text.x = element_text(angle = 60, hjust=1))
beachbugs_long%>%
ggplot(aes(site, year, fill= buglevels)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")+
theme(axis.text.x = element_text(angle = 60, hjust=1))
#makes a new column of the highest buglevel observed at each site
beachbugs_w_max <- beachbugs_long %>%
group_by(site) %>%
mutate(max_buglevel = max(buglevels, na.rm=T)) %>%
arrange(site)
beachbugs_w_max
#makes a new table where the buglevels are normalized to the max_buglevel
beachbugs_normalized <- beachbugs_w_max %>%
group_by(site) %>%
mutate(norm_buglevel = buglevels/max_buglevel) %>%
arrange(site,year) %>%
select(site, year, norm_buglevel)   # you dont have to select(), but I think its a clearer looking table
beachbugs_normalized
beachbugs_long%>%
ggplot(aes(site, year, fill= norm_buglevels)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")+
theme(axis.text.x = element_text(angle = 60, hjust=1))
beachbugs_normalized%>%
ggplot(aes(site, year, fill= norm_buglevels)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")+
theme(axis.text.x = element_text(angle = 60, hjust=1))
beachbugs_normalized%>%
ggplot(aes(site, year, fill= norm_buglevel)) +
geom_tile() +
scale_fill_gradient(low="yellow", high="red")+
theme(axis.text.x = element_text(angle = 60, hjust=1))
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
# male
# bald
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
evil_vec
# red eyes
# male
# bald
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
red_vec
# male
# bald
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "male")%>%
pull(names)
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "male")%>%
pull(name)
male_vec
# bald
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "male")%>%
pull(name)
male_vec
# bald
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "male")%>%
pull(name)
male_vec
# bald
superhero_info
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "Male")%>%
pull(name)
male_vec
# bald
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "Male")%>%
pull(name)
# bald
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "Male")%>%
pull(name)
# bald
bald_vec <- superhero_info%>%
filter(hair_color == "No Hair")
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "Male")%>%
pull(name)
# bald
bald_vec <- superhero_info%>%
filter(hair_color == "No Hair")%>%
pull(name)
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "Male")%>%
pull(name)
# bald
bald_vec <- superhero_info%>%
filter(hair_color == "No Hair")%>%
pull(name)
bald
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "Male")%>%
pull(name)
# bald
bald_vec <- superhero_info%>%
filter(hair_color == "No Hair")%>%
pull(name)
bald_vec
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "Male")%>%
pull(name)
# bald
bald_vec <- superhero_info%>%
filter(hair_color == "No Hair")%>%
pull(name)
# evil
evil_vec <- superhero_info %>%
filter(alignment == "bad")%>%
pull(name)
# red eyes
red_eye_vec <- superhero_info%>%
filter(eye_color == "red")%>%
pull(name)
# male
male_vec <- superhero_info%>%
filter(gender == "Male")%>%
pull(name)
# bald
bald_vec <- superhero_info%>%
filter(hair_color == "No Hair")%>%
pull(name)
questions_list <- list(evil_vec, red_eye_vec, male_vec, bald_vec)
questions_list <- list(evil_vec, red_eye_vec, male_vec, bald_vec)
question_list
questions_list <- list(evil_vec, red_eye_vec, male_vec, bald_vec)
questions_list
questions_list <- list(evil_vec, red_eye_vec, male_vec, bald_vec)
# something like:
ggVennDiagram( list, category.names = c("evil_vec", "red_eye_vec", "male_vec", "bald_vec"))
# something like:
ggVennDiagram( list, category.names = c("evil_vec", "red_eye_vec", "male_vec", "bald_vec"))
library(tidyverse)
#install.packages("ggVennDiagram")
library(ggVennDiagram)
library(RColorBrewer)
#install.packages("ggworldcloud")
library(ggwordcloud)
homerange <- read_csv("data/modified_Tamburelloetal_HomeRangeDatabase.csv")
homerange$taxon
flying_vec <- homerange %>%
filter(locomotion == "flying")%>%
pull(common.name)
swimming_vec <- homerange %>%
filter(locomotion == "swimming")%>%
pull(common.name)
fly_or_swim_list <- list(flying_vec, swimming_vec) #circles of the ven diagram
ggVennDiagram(fly_or_swim_list, category.names = c("Fly", "Swim"))
flying_vec
bird_vec <- homerange %>%
filter(taxon == "birds")%>%
pull(common.name)
fly_or_bird_list <- list(flying_vec, bird_vec)
ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"))
homerange%>%
filter(locomotion != "flying")%>%
filter(taxon == "birds")
homerange%>%
filter(taxon!= "bird")%>%
filter(locomotion == "flying")%>%
select(common.name)
herbivore_vec <- homerange %>%
filter(trophic.guild == "herbivore")%>%
pull(common.name)
fly_bird_herbi_list <- list(flying_vec, bird_vec, herbivore_vec) #created a new list for the new venn diagram
ggVennDiagram(fly_bird_herbi_list, category.names = c("Fly", "Bird", "Herbivore"))
# you can toggle edge size
venn_plot <- ggVennDiagram(fly_or_bird_list, category.names = c("Fly", "Bird"), edge_size = 1.5)
venn_plot +
scale_fill_distiller(palette = "Greys")+ #distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly")
)
# you can toggle edge size and label (Fly, Bird) colors here
ggVennDiagram(fly_or_bird_list,
set_color = c("black", "blue"),             # sets label colors
category.names = c("Fly", "Bird"),          # sets category label names
label_color = "firebrick",                  # sets overlap-quantity label color
label_size = 4                              # sets overlap-label size
)+
scale_color_brewer(palette = "Set3")+                   # sets palette for circle colors
scale_fill_distiller(palette = "Greys")+                # distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly") )
#Set Up the vectors:
#you can also recycle the one we made earlier
swimming_vec<- homerange %>%
filter(locomotion=="swimming")%>%
pull(common.name)
carni_vec<- homerange %>%
filter(trophic.guild=="carnivore")%>%
pull(common.name)
aqua_vec <- homerange %>%
filter(realm == "aquatic")%>%
pull(common.name)
ecto_vec<- homerange %>%
filter(thermoregulation =="ectotherm")%>%
pull(common.name)
ggVennDiagram(fly_or_bird_list,
set_color = c("black", "blue"),             # sets label colors
category.names = c("Fly", "Bird"),          # sets category label names
label_color = "firebrick",                  # sets overlap-quantity label color
label_size = 4                              # sets overlap-label size
)+
scale_color_brewer(palette = "Set3")+                   # sets palette for circle colors
scale_fill_distiller(palette = "Greys")+                # distiller is for discrete data
labs(title = "Do all birds fly? Do only birds fly?",
caption = ("you can add a caption here, e.g.: Studys show not all birds fly, and not only birds fly") )
# Make the list of vectors:
tired_list <- list(swimming_vec, carni_vec, aqua_vec, ecto_vec)
# Make the plot:
ggVennDiagram(tired_list,
category.names = c("swimming", "carnivore","aquatic", "ectotherm"),
set_color = c("orange", "red","blue","purple"), label="count")+
scale_fill_distiller(palette ="Purples")+
labs(title = "i am tired")
hr_taxon_count <- homerange %>%
count(taxon)
hr_taxon_count
hr_taxon_count %>%
ggplot(aes(
label = taxon,
size = n,
color = taxon
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
names(homerange)
repfam_count <- homerange %>%
filter(taxon=="lizard" | taxon=="snakes" | taxon=="turtles" | taxon=="tortoises")%>%
count(family)
repfam_count
repfam_count %>%
ggplot(aes(
label = family,
size = n,
color = family)) +
geom_text_wordcloud() +
scale_size_area(max_size = 15)
# something like:
ggVennDiagram(list, category.names = c("evil", "red_eye", "male", "bald"))
questions_list <- list(evil_vec, red_eye_vec, male_vec, bald_vec)
questions_list
questions_list <- list(evil_vec, red_eye_vec, male_vec, bald_vec)
# something like:
ggVennDiagram(list, category.names = c("bad", "red", "Male", "No Hair"))
# something like:
ggVennDiagram(questions_list, category.names = c("bad", "red", "Male", "No Hair"))
questions_list%>%
filter(alignment == "bad" & eye_color = "red" & gender = "Male", hair_color = "No Hair")
questions_list%>%
filter(alignment == "bad" & eye_color == "red" & gender == "Male", hair_color == "No Hair")
superhero_info%>%
filter(alignment == "bad" & eye_color == "red" & gender == "Male", hair_color == "No Hair")
good_vec <- superhero_info %>%
filter(alignment == "good")%>%
pull(name)
blue_eye_vec <- superhero_info%>%
filter(eye_color == "blue")%>%
pull(name)
female_vec <- superhero_info%>%
filter(gender == "Female")%>%
pull(name)
blond_vec <- superhero_info%>%
filter(hair_color == "Blond")%>%
pull(name)
question_list <- list(good_vec, blue_eye_vec, female_vec, blond_vec)
good_vec <- superhero_info %>%
filter(alignment == "good")%>%
pull(name)
blue_eye_vec <- superhero_info%>%
filter(eye_color == "blue")%>%
pull(name)
female_vec <- superhero_info%>%
filter(gender == "Female")%>%
pull(name)
blond_vec <- superhero_info%>%
filter(hair_color == "Blond")%>%
pull(name)
question_list <- list(good_vec, blue_eye_vec, female_vec, blond_vec)
ggVennDiagram(questions_list, category.names = c("good", "blue", "Female", "Blond"))
superhero_info%>%
filter(alignment == "good" & eye_color == "blue" & gender == "Female", hair_color == "Blond")
superhero_info%>%
filter(alignment == "good" & eye_color == "blue" & gender == "Female", hair_color == "Blond")
head(superhero_powers)
power_frequency <- superhero_powers %>%
select(-hero_names) %>%
summarise_all(~(sum(.))) %>%
pivot_longer(everything(), names_to = "power", values_to = "freq")
power_frequency
power_frequency %>%
ggplot(aes(
label = power,
size = n,
color = power
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
power_frequency %>%
ggplot(aes(
label = power,
size = frequency,
color = power
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
power_frequency %>%
ggplot(aes(
label = power,
size = freq,
color = power
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
power_quantity <- superhero_powers %>%
pivot_longer(-hero_names, names_to = "power", values_to = "yes_or_no") %>%
group_by(hero_names) %>%
mutate(sum_powers = sum(yes_or_no, na.rm=T)) %>%
arrange(desc(sum_powers), hero_names, desc(yes_or_no))
power_quantity
#we have to trim down to only the top 50, or it will crowd the image!
power_quantity <- power_quantity %>%
ungroup %>%
distinct(hero_names, sum_powers) %>%
slice_max(sum_powers, n = 50)
power_quantity
power_frequency %>%
ggplot(aes(
label = power,
size = freq,
color = power
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
power_quantity %>%
ggplot(aes(
label = hero_names,
size = sum_powers,
color = hero_names
)) +
geom_text_wordcloud() +
scale_size_area(max_size = 20) +
theme_minimal()
