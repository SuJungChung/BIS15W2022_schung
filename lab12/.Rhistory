knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(here)
library(janitor)
library(lubridate)
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(dplyr)
library(gapminder)
library(tidyverse)
library(ggthemes)
population<-readr::read_csv("data/population_total.csv")
income<-readr::read_csv("data/income_per_person_gdppercapita_ppp_inflation_adjusted.csv")
life<-readr::read_csv("data/life_expectancy_years.csv")
head(population)
population%>%
summarize(number_nas = sum(is.na(population)))
population_long<-population%>%
pivot_longer(-country,
names_to="year",
values_to="population_size")
population_long
head(income)
income%>%
summarize(number_nas = sum(is.na(income)))
income_long<-income%>%
pivot_longer(-country,
names_to="year",
values_to="income_per_person")
income_long
head(life)
life%>%
summarize(number_nas = sum(is.na(life)))
life_long<-life%>%
pivot_longer(-country,
values_to="life_expectancy",
names_to="year")%>%
filter(life_expectancy!="NA")
life_long%>%
summarize(number_nas = sum(is.na(life_long)))
life_long
income%>%
count(country)
income%>%
count(country)%>%
summarize(n=n())
life%>%
count(country)
life%>%
count(country)%>%
summarize(n=n())
population%>%
count(country)
population%>%
count(country)%>%
summarize(n=n())
life_long%>%
filter(year>="1920" & year<="2020")%>%
group_by(country)%>%
summarize(mean_age=mean(life_expectancy))%>%
arrange(desc(mean_age))%>%
top_n(1, mean_age)
life_long%>%
filter(year>="1920" & year<="2020")%>%
group_by(country)%>%
summarize(mean_age=mean(life_expectancy))%>%
arrange(desc(mean_age))%>%
top_n(-1, mean_age)
life_long%>%
filter(year>="1920" & year<="2020")%>%
group_by(country)%>%
summarize(max=max(life_expectancy),
min=min(life_expectancy))%>%
mutate(change_life_expectancy=max-min)%>%
arrange(desc(change_life_expectancy))%>%
top_n(5, change_life_expectancy)
life_long
life_long%>%
filter(year>="1920" & year<="2020")%>%
filter(country=="Kazakhstan")%>%
ggplot(aes(x=as.integer(year), y=life_expectancy))+
geom_line()+
theme_stata()+
labs(title ="Life Expectancy from 1920 to 2020 of Kazakhstan",
x="year",
y="age")
population_long%>%
filter(year>="1920" & year<="2020")%>%
group_by(country)%>%
summarize(max=max(population_size),
min=min(population_size))%>%
mutate(change_population_size=max-min)%>%
arrange(desc(change_population_size))%>%
top_n(5, change_population_size)
population_long
population_long%>%
filter(year>="1920" & year<="2020")%>%
filter(country=="India"| country=="China"| country=="Indonesia"| country=="United States"| country=="Pakistan")%>%
ggplot(aes(x=as.integer(year), y=population_size, color=country))+
geom_line(size=1)+
theme_stata()+
labs(title ="Population Growth over the past 100 years",
x="year",
y="population size (indiduals)")
income_long
#table
income_long%>%
filter(year>="1920" & year<="2020")%>%
group_by(country)%>%
summarize(max=max(income_per_person),
min=min(income_per_person))%>%
mutate(change_income_per_person=max-min)%>%
arrange(desc(change_income_per_person))%>%
top_n(5, change_income_per_person)
#plot
income_long%>%
filter(year>="1920" & year<="2020")%>%
filter(country=="United Arab Emirates"| country=="Qatar"| country=="Brunei"| country=="Kuwait"| country=="Luzembourg")%>%
ggplot(aes(x=as.integer(year), y=income_per_person))+
geom_line(size=1)+
facet_wrap(.~country)+
theme_stata()+
labs(title ="GDP per person over the past 100 years",
x="year",
y="GDP per person")
income_100 <- income_long%>%
filter(year>="1920" & year<="2020")
life_100 <- life_long%>%
filter(year>="1920" & year<="2020")
population_100<- population_long%>%
filter(year>="1920" & year<="2020")
gapminder_join <- inner_join(life_100, population_100, by= c("country", "year"))
gapminder_join <- inner_join(gapminder_join, income_100, by= c("country", "year"))
gapminder_join
#countries with the smallest change in GDP
gapminder_join%>%
group_by(country)%>%
summarize(max=max(income_per_person),
min=min(income_per_person))%>%
mutate(change_income_per_person=max-min)%>%
arrange(change_income_per_person)%>%
top_n(-6, change_income_per_person)
#plot
gapminder_join%>%
filter(country=="Burundi"| country=="Somalia"| country=="Niger"| country=="Malawi"| country=="Sierra Leone"| country=="Mozambique")%>%
ggplot(aes(x=income_per_person, y=life_expectancy))+
geom_point(size=1)+
geom_smooth(method="lm", se=FALSE, color="red")+
facet_wrap(.~country)+
theme_stata()+
labs(title ="Life Expectancy vs GDP per Person",
x="GDP per person",
y="Life Expectancy")
population_long%>%
filter(year>="1920" & year<="2020")%>%
filter(country=="India"| country=="China"| country=="Indonesia"| country=="United States"| country=="Pakistan")%>%
ggplot(aes(x=as.integer(year), y=population_size, color=country))+
geom_line(size=1)+
theme_stata()+
facet_wrap(.~country)+
labs(title ="Population Growth over the past 100 years",
x="year",
y="population size (indiduals)")
population_long%>%
filter(year>="1920" & year<="2020")%>%
filter(country=="India"| country=="China"| country=="Indonesia"| country=="United States"| country=="Pakistan")%>%
ggplot(aes(x=as.integer(year), y=population_size))+
geom_line(size=1)+
theme_stata()+
facet_wrap(.~country)+
labs(title ="Population Growth over the past 100 years",
x="year",
y="population size (indiduals)")
population_long%>%
filter(year>="1920" & year<="2020")%>%
filter(country=="India"| country=="China"| country=="Indonesia"| country=="United States"| country=="Pakistan")%>%
ggplot(aes(x=as.integer(year), y=population_size, color=country))+
geom_line(size=1)+
theme_stata()+
labs(title ="Population Growth over the past 100 years",
x="year",
y="population size (indiduals)")
population_long%>%
filter(year>="1920" & year<="2020")%>%
filter(country=="India"| country=="China"| country=="Indonesia"| country=="United States"| country=="Pakistan")%>%
ggplot(aes(x=as.integer(year), y=population_size, color=country))+
geom_line(size=1)+
theme_stata()+
facet_wrap(country~.)+
labs(title ="Population Growth over the past 100 years",
x="year",
y="population size (indiduals)")
population_long%>%
filter(year>="1920" & year<="2020")%>%
filter(country=="India"| country=="China"| country=="Indonesia"| country=="United States"| country=="Pakistan")%>%
ggplot(aes(x=as.integer(year), y=population_size, color=country))+
geom_line(size=1)+
theme_stata()+
facet_grid(country~.)+
labs(title ="Population Growth over the past 100 years",
x="year",
y="population size (indiduals)")
population_long%>%
filter(year>="1920" & year<="2020")%>%
filter(country=="India"| country=="China"| country=="Indonesia"| country=="United States"| country=="Pakistan")%>%
ggplot(aes(x=as.integer(year), y=population_size, color=country))+
geom_line(size=1)+
theme_stata()+
labs(title ="Population Growth over the past 100 years",
x="year",
y="population size (indiduals)")
files <- list.files(path = "data/spiders", pattern = ".csv")
files
files <- list.files(path = "data/spiders", pattern = ".csv", full.names = TRUE)
files
spider_list <- lapply(files, read_csv)
spider_list[[3]] #pull out element three
class(spider_list[[3]])
spider_list[[23]]
spider_list[[23]]
head(spider_list[[23]])
spider_list[[23]]
glimpse(spider_list[[23]])
spider_list[[23]]
summary(spider_list[[23]])
spider_list[[23]]
names(spider_list[[23]])
spider_list[[23]]
names(spider_list[[23]])
str(spider_list[[23]])
names <- list.files(path = "data/spiders", pattern = ".csv")
names
names_list <- strsplit(names, split = " .csv")
names_list
names_vec <- unlist(names_list)
names_vec
names(spider_list) <- names_vec
names(spider_list)
names(Butte)
names%>%
Butte
names%>%
summary(Butte)
names%>%
summary(Butte)
spider_list$Butte
spider_list%>%
Butte
spider_list%>%
summary(Butte)
spider_list$Butte
spider_list$`Santa Cruz` #using base R to call in the county
spider_list$Santa Cruz #using base R to call in the county
spider_list$'Santa Cruz' #using base R to call in the county
spider_list$Butte #using base R to call in the county
spider_list$Napa #using base R to call in the county
spiders_all <- bind_rows(spider_list)
spiders_all
table_A <- read_csv(here("lab12", "data", "table_A.csv"))
table_B <- read_csv(here("lab12", "data", "table_B.csv"))
names(table_A)
names(table_B)
names(table_A)
head(table_A)
names(table_A)
glipmse(table_A)
names(table_A)
glimpse(table_A)
names(table_A)
head(table_A)
names(table_B)
head(table_B)
names(table_A)
names(table_B)
table_A
table_B
inner_exampleDF <- inner_join(table_A, table_B, by="customer_ID")
inner_exampleDF
left_exampleDF <- left_join(table_A, table_B, by="customer_ID")
left_exampleDF
right_exampleDF <- right_join(table_A, table_B, by="customer_ID")
right_exampleDF
full_exampleDF <- full_join(table_A, table_B, by="customer_ID")
full_exampleDF
semi_exampleDF <- semi_join(table_A, table_B, by="customer_ID")
semi_exampleDF
anti_exampleDF <- anti_join(table_A, table_B, by="customer_ID")
anti_exampleDF
spiders_locs <- read_csv("data/spiders locations/spiders_locations.csv")
spiders_locs
full_join(spider_all, spider_locs, by=Accession)
full_join(spider_all, spider_locs, by="Accession")
full_join(spider_all, spider_locs, by="Accession")
full_join(spiders_all, spider_locs, by="Accession")
full_join(spiders_all, spiders_locs, by="Accession")
spiders_with_locs <-
full_join(spiders_all, spiders_locs, by=c("Accession"))
spiders_with_locs <-
full_join(spiders_all, spiders_locs, by=c("Accession"))
summary(spiders_with_locs)
spiders_with_locs <-
full_join(spiders_all, spiders_locs, by=c("Accession"))
summary(spiders_with_locs)
names(spiders_with_locs)
class(spiders_with_locs$Date)
day <- today()
day <- today()
day
str(day)
str(day)
datetime <- now()
datetime
dmy(spiders_with_locs$Date)
as.Date(spiders_with_locs$Date, format = "%d/%m/%y")
dateformat1 <- "20200922"
dateformat2 <- "09-22-2020"
dateformat3 <- "22/09/2020"
dateformat4 <- "09-22-2020 17:00:00"
dateformat5 <- "20200922 170000"
ymd(dateformat1)
dmy(dateformat2)
dmy_hms(dateformat2)
ymd(dateformat2)
dmy(dateformat2)
mdy(dateformate3)
mdy_hms(dateformat4)
mdy(dateformat3)
mdy(dateformat2)
dmy(dateformat3)
ymd_hms(dateformat5)
year(datetime)
month(datetime)
day(datetime)
hour(datetime)
minute(datetime)
second(datetime)
wday(datetime, label=T)
write.csv(spiders_with_locs, file = "spiders_with_locs.csv", row.names = FALSE)
install.packages("devtools")
#library(devtools)
#devtools::install_github("dkahle/ggmap")
#install.packages("devtools")
library(devtools)
#devtools::install_github("dkahle/ggmap")
#install.packages("devtools")
#library(devtools)
devtools::install_github("dkahle/ggmap")
install.packages("remotes")
#remotes::install_github("hrbrmstr/albersusa")
install.packages("remotes")
#remotes::install_github("hrbrmstr/albersusa")
install.packages("remotes")
#install.packages("remotes")
remotes::install_github("hrbrmstr/albersusa")
library(tidyverse)
library(here)
library(janitor)
library(ggmap)
spiders <- read_csv(here("lab12", "data", "spiders_with_locs.csv")) %>% clean_names()
spiders <- spiders %>% filter(latitude<=42)
spiders %>%
select(latitude, longitude) %>%
summary()
lat <- c(34.67, 41.80)
long <- c(-124.1, -115.5)
bbox <- make_bbox(long, lat, f = 0.05)
map1 <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
map1 <- get_map(bbox, maptype = "watercolor", source = "stamen") # free maps by stamen
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
map1 <- get_map(bbox, maptype = "toner-backround", source = "stamen") # free maps by stamen
map1 <- get_map(bbox, maptype = "toner-background", source = "stamen") # free maps by stamen
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
map1 <- get_map(bbox, maptype = "toner-hybrid", source = "stamen") # free maps by stamen
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
map1 <- get_map(bbox, maptype = "toner-lite", source = "stamen") # free maps by stamen
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
map1 <- get_map(bbox, maptype = "toner-2011", source = "stamen") # free maps by stamen
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
map1 <- get_map(bbox, maptype = "terrain-lines", source = "stamen") # free maps by stamen
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
map1 <- get_map(bbox, maptype = "toner-hybrid", source = "stamen") # free maps by stamen
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
map1 <- get_map(bbox, maptype = "toner-lite", source = "stamen") # free maps by stamen
ggmap(map1)
ggmap(map1) +
geom_point(data = spiders, aes(longitude, latitude)) +
labs(x = "Longitude", y = "Latitude", title = "Spider Locations")
library(albersusa)
us_comp <- usa_sf() # get a composite map of the USA
us_comp <- usa_sf() # get a composite map of the USA
us_comp
us_comp <- usa_sf() # get a composite map of the USA
cnty_comp <- counties_sf() # get a composite map of USA counties
ggplot() +
geom_sf(data = us_comp, size = 0.125) +
theme_linedraw()+
labs(title = "USA State Boundaries")
ca_comp <- us_comp %>%
filter(name=="California")
ca_cnty_comp <- cnty_comp %>%
filter(state=="California")
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude))
ggplot() +
geom_sf(data = ca_comp, size = 0.125)+
geom_sf(data = ca_cnty_comp, size = 0.125)+
geom_point(data = spiders, aes(longitude, latitude), size=0.8)+
labs(x = "Figure 1: Distribution of Usofila spiders")+
theme_minimal() +
theme(axis.text = element_blank()) +
theme(axis.title.x = element_text(hjust=0.5, size = 10)) +
theme(axis.title.y = element_blank()) +
theme(panel.grid = element_blank()) +
theme(legend.position = c(0.9, 0.3)) -> uso_map
uso_map
us_comp <- usa_sf() # get a composite map of the USA
cnty_comp <- counties_sf() # get a composite map of USA counties
cnty_comp <- counties_sf() # get a composite map of USA counties, adding another layer
ggplot() +
geom_sf(data = us_comp, size = 0.125) +
theme_linedraw()+
labs(title = "USA State Boundaries")
