# generate a row with a sidebar
sidebarLayout(
# define the sidebar with one input
sidebarPanel(
selectInput("taxon", " Select Taxon of Interest:", choices=unique(homerange$taxon)), hr(),
helpText("Reference: Tamburello N, Cote IM, Dulvy NK (2015) Energy and the scaling of animal space use. The American Naturalist 186(2):196-211.")),
# create a spot for the barplot
mainPanel(
plotOutput("taxonPlot"))
)
)
# define a server for the Shiny app
server <- function(input, output, session) {
# fill in the spot we created for a plot
output$taxonPlot <- renderPlot({
homerange %>%
filter(taxon == input$taxon) %>%
ggplot(aes(x=log10.hra)) +
geom_density(color="black", fill="red", alpha=0.6)
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shinydashboard")
library(shinydashboard)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
)
server <- function(input, output) { }
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Penguins Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
wolves %>%
filter(sex!="NA") %>%
ggplot(aes(x=sex, fill=sex))+
geom_bar()+
facet_wrap(~pop)
wolves <- read_csv("data/wolves_data/wolves_dataset.csv")
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Penguins Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable=T),
dashboardBody(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
plotOutput("plot", width = "500px", height = "400px"))
)
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point() +
theme_light()
})
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "Penguins"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_depth_mm"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(
plotOutput("plot", width = "500px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(penguins, aes_string(x = input$x, y = input$y, color="species")) +
geom_point(size=input$pointsize, alpha=0.8) +
theme_light(base_size = 18)
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebare(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("Alaska Peninsula", "Denali National Park", "central-eastern Alaska", "Yukon-Charley National Preserve", "Ellesmere Island", "North Slave Northwest Territories", "South Slave Northwest Territories", "British Columbia", "southeastern Alaska", "Banff & Jasper National Parks", "Montana", "Yellowstone National Park", "Grand Teton National Park", "Mexican wolves", "Ontario", "Superior National Forest", "the Upper Peninsula of Michigan"), select = "Alaska Peninsula")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("Alaska Peninsula", "Denali National Park", "central-eastern Alaska", "Yukon-Charley National Preserve", "Ellesmere Island", "North Slave Northwest Territories", "South Slave Northwest Territories", "British Columbia", "southeastern Alaska", "Banff & Jasper National Parks", "Montana", "Yellowstone National Park", "Grand Teton National Park", "Mexican wolves", "Ontario", "Superior National Forest", "the Upper Peninsula of Michigan"), select = "Alaska Peninsula")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("Alaska Peninsula", "Denali National Park", "central-eastern Alaska", "Yukon-Charley National Preserve", "Ellesmere Island", "North Slave Northwest Territories", "South Slave Northwest Territories", "British Columbia", "southeastern Alaska", "Banff & Jasper National Parks", "Montana", "Yellowstone National Park", "Grand Teton National Park", "Mexican wolves", "Ontario", "Superior National Forest", "the Upper Peninsula of Michigan"), select = "Alaska Peninsula")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF", "SS.NWT","YNP","YUCH"), select = "AK.PEN")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
wolves%>%
distinct(pop)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF", "SS.NWT","YNP","YUCH"), select = "AK.PEN")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF", "SS.NWT","YNP","YUCH"), select = "AK.PEN")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF", "SS.NWT","YNP","YUCH"), selected = "AK.PEN")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
#can use pipes and reactive functions from dplyr
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves%>%
filter(sex!="NA")%>%
filter(pop==input$x)%>%
ggplot(aes_string(x="sex", y="sex")))+
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF", "SS.NWT","YNP","YUCH"), selected = "AK.PEN")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
#can use pipes and reactive functions from dplyr
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves%>%
filter(sex!="NA")%>%
filter(pop==input$x)%>%
ggplot(aes_string(x="sex", y="sex"))+
geom_bar(position="dodge")
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF", "SS.NWT","YNP","YUCH"), selected = "AK.PEN")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
#can use pipes and reactive functions from dplyr
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves%>%
filter(sex!="NA")%>%
filter(pop==input$x)%>%
ggplot(aes_string(x="sex", y="sex"))+
geom_bar(position="dodge")
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF", "SS.NWT","YNP","YUCH"), selected = "AK.PEN")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
#can use pipes and reactive functions from dplyr
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves%>%
filter(sex!="NA")%>%
filter(pop=="input$x")%>%
ggplot(aes_string(x="sex", y="sex"))+
geom_bar(position="dodge")
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF", "SS.NWT","YNP","YUCH"), selected = "AK.PEN")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
#can use pipes and reactive functions from dplyr
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves%>%
filter(sex!="NA")%>%
filter(pop=="input$x")%>%
ggplot(aes_string(x="sex", y="sex"))+
geom_bar(position="dodge")
})
}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title ="Wolves"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(title = "Population", width = 4,
selectInput("x", "Select Population", choices = c("AK.PEN","BAN.JAS","BC","DENALI","ELLES","GTNP","INT.AK","MEXICAN","MI","MT","N.NWT","ONT","SE.AK","SNF", "SS.NWT","YNP","YUCH"), selected = "AK.PEN")
),
box(
title = "Wolf Male and Female Populations", width = 7,
plotOutput("plot", width = "700px", height ="600px")
)
)
)
)
#can use pipes and reactive functions from dplyr
server <- function(input, output, session) {
output$plot <- renderPlot({
wolves%>%
filter(sex!="NA")%>%
filter(pop=="input$x")%>%
ggplot(aes_string(x="sex", fill="sex"))+
geom_bar(position="dodge")
})
}
shinyApp(ui, server)
